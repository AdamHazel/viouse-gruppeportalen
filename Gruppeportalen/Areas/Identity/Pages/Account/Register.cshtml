@page
@model RegisterModel
@{
ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-6">
        <form id="registerForm" method="post">
            <input asp-for="Input.TypeOfUser" type="hidden" id="typeOfUser"/>
            <input asp-for="Input.UserId" type="hidden" id="userId"/>

            <h2>Create a new account</h2>
            <hr/>
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

            <!-- Basic Registration Fields -->
            <div class="form-floating mb-3">
                <input asp-for="Input.Email" class="form-control" placeholder="name@example.com" id="email"/>
                <label asp-for="Input.Email">E-mail</label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Password" class="form-control" placeholder="Password" type="password" id="password"/>
                <label asp-for="Input.Password">Password</label>
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.ConfirmPassword" class="form-control" placeholder="Confirm Password" type="password" id="confirm-password"/>
                <label asp-for="Input.ConfirmPassword">Confirm Password</label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>

            <!-- User Type Selection -->
            <div class="mb-3 text-center">
                <button type="button" class="btn btn-primary" onclick="registerUser('PrivateUser')">Register as Private User</button>
                <button type="button" class="btn btn-secondary" onclick="registerUser('OrganizationUser')">Register Organization</button>
            </div>
            <!-- Confirmation Link -->
            <div id="confirmationLinkContainer"></div>

            <!-- Private User Fields -->
            <div id="privateForm" style="display:none;">
                <h3>Private User Details</h3>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Firstname" class="form-control" placeholder="First name" id="firstname"/>
                    <label asp-for="Input.Firstname">First name</label>
                    <span asp-validation-for="Input.Firstname" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Lastname" class="form-control" placeholder="Last name" id="lastname"/>
                    <label asp-for="Input.Lastname">Last name</label>
                    <span asp-validation-for="Input.Lastname" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.DateOfBirth" class="form-control" type="date" placeholder="Date of birth" id="dob"/>
                    <label asp-for="Input.DateOfBirth">Date of Birth</label>
                    <span asp-validation-for="Input.DateOfBirth" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <small class="text-muted">If you don't have a Norwegian phone number, please include your country code.</small>
                    <input asp-for="Input.Telephone" class="form-control" placeholder="Telephone" id="telephone"/>
                    <label asp-for="Input.Telephone">Telephone</label>
                    <span asp-validation-for="Input.Telephone" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Address" class="form-control" placeholder="Address" id="address"/>
                    <label asp-for="Input.Address">Address</label>
                    <span asp-validation-for="Input.Address" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.City" class="form-control" placeholder="City" id="city"/>
                    <label asp-for="Input.City">City</label>
                    <span asp-validation-for="Input.City" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Postcode" class="form-control" placeholder="Postcode" id="postcode"/>
                    <label asp-for="Input.Postcode">Postcode</label>
                    <span asp-validation-for="Input.Postcode" class="text-danger"></span>
                </div>
                <button type="button" class="btn btn-primary w-100" onclick="completePrivateUserRegistration()">Complete Registration</button>
            </div>

            <!-- Organization User Fields -->
            <div id="organizationForm" style="display:none;">
                <h3>Organization Details</h3>
                <div class="form-floating mb-3">
                    <input asp-for="Input.OrganisationNumber" class="form-control" placeholder="Organisation Number" id="org-number"/>
                    <label asp-for="Input.OrganisationNumber">Organisation Number</label>
                    <span asp-validation-for="Input.OrganisationNumber" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.OrganisationName" class="form-control" placeholder="Organisation Name" id="org-name"/>
                    <label asp-for="Input.OrganisationName">Organisation Name</label>
                    <span asp-validation-for="Input.OrganisationName" class="text-danger"></span>
                </div>
                <button type="button" class="btn btn-primary w-100" onclick="completeOrganizationUserRegistration()">Complete Registration</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
<partial name="_ValidationScriptsPartial"/>
<script>
    function registerUser(userType) {
        document.getElementById('typeOfUser').value = userType;

        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirm-password').value;

        if (password !== confirmPassword) {
            alert("Passwords do not match!");
            return;
        }

        const formData = new URLSearchParams(new FormData(document.getElementById('registerForm')));

        fetch('/Identity/Account/RegisterPartial', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: formData.toString()
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('userId').value = data.userId;

                    // Show additional form fields based on user type
                    if (userType === 'PrivateUser') {
                        document.getElementById('privateForm').style.display = 'block';
                        document.getElementById('organizationForm').style.display = 'none';
                    } else {
                        document.getElementById('organizationForm').style.display = 'block';
                        document.getElementById('privateForm').style.display = 'none';
                    }

                    // Display email confirmation link
                    const confirmationLinkHtml = `<p>Please confirm your email: <a href="${data.confirmationUrl}" onclick="confirmEmail(event, '${data.confirmationUrl}')">click here</a></p>`;
                    document.getElementById("confirmationLinkContainer").innerHTML = confirmationLinkHtml;
                } else {
                    alert(data.errors.join("\n") || "An error occurred");
                }
            })
            .catch(error => {
                console.error("Unexpected error:", error);
                alert("An unexpected error occurred: " + error.message);
            });
    }


    function completePrivateUserRegistration() {
        const formData = new URLSearchParams(new FormData(document.getElementById('registerForm')));
        fetch('/Identity/Account/RegisterPrivateUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: formData.toString()
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Registration completed successfully!");
                    window.location.href = "/Home";
                } else {
                    alert(data.errors.join("\n"));
                }
            })
            .catch(error => {
                console.error("Unexpected error:", error);
                alert("An unexpected error occurred: " + error.message);
            });
    }

    function completeOrganizationUserRegistration() {
        const formData = new URLSearchParams(new FormData(document.getElementById('registerForm')));
        fetch('/Identity/Account/RegisterOrganizationUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: formData.toString()
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Registration completed successfully!");
                    window.location.href = "/Home";
                } else {
                    alert(data.errors.join("\n"));
                }
            })
            .catch(error => {
                console.error("Unexpected error:", error);
                alert("An unexpected error occurred: " + error.message);
            });
    }

    function confirmEmail(event, confirmationUrl) {
        event.preventDefault(); // Prevent link from navigating away

        fetch(confirmationUrl, {
            method: 'GET', // Use GET request for confirmation
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Email confirmed successfully!");
                } else {
                    alert(data.message || "Invalid confirmation request.");
                }
            })
            .catch(error => {
                console.error("Error confirming email:", error);
                alert("An error occurred while confirming the email.");
            });
    }



</script>

}